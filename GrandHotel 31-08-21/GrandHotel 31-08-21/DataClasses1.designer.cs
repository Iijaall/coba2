#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrandHotel_31_08_21
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Grand Hotel 28/08/21")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCleaningRoom(CleaningRoom instance);
    partial void UpdateCleaningRoom(CleaningRoom instance);
    partial void DeleteCleaningRoom(CleaningRoom instance);
    partial void InsertRoomType(RoomType instance);
    partial void UpdateRoomType(RoomType instance);
    partial void DeleteRoomType(RoomType instance);
    partial void InsertCleaningRoomDetail(CleaningRoomDetail instance);
    partial void UpdateCleaningRoomDetail(CleaningRoomDetail instance);
    partial void DeleteCleaningRoomDetail(CleaningRoomDetail instance);
    partial void InsertCleaningRoomItem(CleaningRoomItem instance);
    partial void UpdateCleaningRoomItem(CleaningRoomItem instance);
    partial void DeleteCleaningRoomItem(CleaningRoomItem instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItemStatus(ItemStatus instance);
    partial void UpdateItemStatus(ItemStatus instance);
    partial void DeleteItemStatus(ItemStatus instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertReseravationRequestItem(ReseravationRequestItem instance);
    partial void UpdateReseravationRequestItem(ReseravationRequestItem instance);
    partial void DeleteReseravationRequestItem(ReseravationRequestItem instance);
    partial void InsertReservation(Reservation instance);
    partial void UpdateReservation(Reservation instance);
    partial void DeleteReservation(Reservation instance);
    partial void InsertReservationCheckOut(ReservationCheckOut instance);
    partial void UpdateReservationCheckOut(ReservationCheckOut instance);
    partial void DeleteReservationCheckOut(ReservationCheckOut instance);
    partial void InsertReservationRoom(ReservationRoom instance);
    partial void UpdateReservationRoom(ReservationRoom instance);
    partial void DeleteReservationRoom(ReservationRoom instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::GrandHotel_31_08_21.Properties.Settings.Default.Grand_Hotel_28_08_21ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CleaningRoom> CleaningRooms
		{
			get
			{
				return this.GetTable<CleaningRoom>();
			}
		}
		
		public System.Data.Linq.Table<RoomType> RoomTypes
		{
			get
			{
				return this.GetTable<RoomType>();
			}
		}
		
		public System.Data.Linq.Table<CleaningRoomDetail> CleaningRoomDetails
		{
			get
			{
				return this.GetTable<CleaningRoomDetail>();
			}
		}
		
		public System.Data.Linq.Table<CleaningRoomItem> CleaningRoomItems
		{
			get
			{
				return this.GetTable<CleaningRoomItem>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<ItemStatus> ItemStatus
		{
			get
			{
				return this.GetTable<ItemStatus>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<ReseravationRequestItem> ReseravationRequestItems
		{
			get
			{
				return this.GetTable<ReseravationRequestItem>();
			}
		}
		
		public System.Data.Linq.Table<Reservation> Reservations
		{
			get
			{
				return this.GetTable<Reservation>();
			}
		}
		
		public System.Data.Linq.Table<ReservationCheckOut> ReservationCheckOuts
		{
			get
			{
				return this.GetTable<ReservationCheckOut>();
			}
		}
		
		public System.Data.Linq.Table<ReservationRoom> ReservationRooms
		{
			get
			{
				return this.GetTable<ReservationRoom>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CleaningRoom")]
	public partial class CleaningRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Date;
		
		private int _EmployeeID;
		
		private EntitySet<CleaningRoomDetail> _CleaningRoomDetails;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public CleaningRoom()
		{
			this._CleaningRoomDetails = new EntitySet<CleaningRoomDetail>(new Action<CleaningRoomDetail>(this.attach_CleaningRoomDetails), new Action<CleaningRoomDetail>(this.detach_CleaningRoomDetails));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CleaningRoom_CleaningRoomDetail", Storage="_CleaningRoomDetails", ThisKey="ID", OtherKey="CleaningRoomID")]
		public EntitySet<CleaningRoomDetail> CleaningRoomDetails
		{
			get
			{
				return this._CleaningRoomDetails;
			}
			set
			{
				this._CleaningRoomDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CleaningRoom", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.CleaningRooms.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.CleaningRooms.Add(this);
						this._EmployeeID = value.ID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CleaningRoomDetails(CleaningRoomDetail entity)
		{
			this.SendPropertyChanging();
			entity.CleaningRoom = this;
		}
		
		private void detach_CleaningRoomDetails(CleaningRoomDetail entity)
		{
			this.SendPropertyChanging();
			entity.CleaningRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomType")]
	public partial class RoomType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Capacity;
		
		private int _RoomPrice;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnRoomPriceChanging(int value);
    partial void OnRoomPriceChanged();
    #endregion
		
		public RoomType()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomPrice", DbType="Int NOT NULL")]
		public int RoomPrice
		{
			get
			{
				return this._RoomPrice;
			}
			set
			{
				if ((this._RoomPrice != value))
				{
					this.OnRoomPriceChanging(value);
					this.SendPropertyChanging();
					this._RoomPrice = value;
					this.SendPropertyChanged("RoomPrice");
					this.OnRoomPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomType_Room", Storage="_Rooms", ThisKey="ID", OtherKey="RoomTypeID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomType = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CleaningRoomDetail")]
	public partial class CleaningRoomDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CleaningRoomID;
		
		private int _RoomID;
		
		private System.DateTime _StartDateTime;
		
		private System.DateTime _FinishDateTime;
		
		private string _Note;
		
		private string _StatusCleaning;
		
		private EntitySet<CleaningRoomItem> _CleaningRoomItems;
		
		private EntityRef<CleaningRoom> _CleaningRoom;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCleaningRoomIDChanging(int value);
    partial void OnCleaningRoomIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnStartDateTimeChanging(System.DateTime value);
    partial void OnStartDateTimeChanged();
    partial void OnFinishDateTimeChanging(System.DateTime value);
    partial void OnFinishDateTimeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnStatusCleaningChanging(string value);
    partial void OnStatusCleaningChanged();
    #endregion
		
		public CleaningRoomDetail()
		{
			this._CleaningRoomItems = new EntitySet<CleaningRoomItem>(new Action<CleaningRoomItem>(this.attach_CleaningRoomItems), new Action<CleaningRoomItem>(this.detach_CleaningRoomItems));
			this._CleaningRoom = default(EntityRef<CleaningRoom>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CleaningRoomID", DbType="Int NOT NULL")]
		public int CleaningRoomID
		{
			get
			{
				return this._CleaningRoomID;
			}
			set
			{
				if ((this._CleaningRoomID != value))
				{
					if (this._CleaningRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCleaningRoomIDChanging(value);
					this.SendPropertyChanging();
					this._CleaningRoomID = value;
					this.SendPropertyChanged("CleaningRoomID");
					this.OnCleaningRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime FinishDateTime
		{
			get
			{
				return this._FinishDateTime;
			}
			set
			{
				if ((this._FinishDateTime != value))
				{
					this.OnFinishDateTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishDateTime = value;
					this.SendPropertyChanged("FinishDateTime");
					this.OnFinishDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusCleaning", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusCleaning
		{
			get
			{
				return this._StatusCleaning;
			}
			set
			{
				if ((this._StatusCleaning != value))
				{
					this.OnStatusCleaningChanging(value);
					this.SendPropertyChanging();
					this._StatusCleaning = value;
					this.SendPropertyChanged("StatusCleaning");
					this.OnStatusCleaningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CleaningRoomDetail_CleaningRoomItem", Storage="_CleaningRoomItems", ThisKey="ID", OtherKey="CleaningRoomDetailID")]
		public EntitySet<CleaningRoomItem> CleaningRoomItems
		{
			get
			{
				return this._CleaningRoomItems;
			}
			set
			{
				this._CleaningRoomItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CleaningRoom_CleaningRoomDetail", Storage="_CleaningRoom", ThisKey="CleaningRoomID", OtherKey="ID", IsForeignKey=true)]
		public CleaningRoom CleaningRoom
		{
			get
			{
				return this._CleaningRoom.Entity;
			}
			set
			{
				CleaningRoom previousValue = this._CleaningRoom.Entity;
				if (((previousValue != value) 
							|| (this._CleaningRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CleaningRoom.Entity = null;
						previousValue.CleaningRoomDetails.Remove(this);
					}
					this._CleaningRoom.Entity = value;
					if ((value != null))
					{
						value.CleaningRoomDetails.Add(this);
						this._CleaningRoomID = value.ID;
					}
					else
					{
						this._CleaningRoomID = default(int);
					}
					this.SendPropertyChanged("CleaningRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_CleaningRoomDetail", Storage="_Room", ThisKey="RoomID", OtherKey="ID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.CleaningRoomDetails.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.CleaningRoomDetails.Add(this);
						this._RoomID = value.ID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CleaningRoomItems(CleaningRoomItem entity)
		{
			this.SendPropertyChanging();
			entity.CleaningRoomDetail = this;
		}
		
		private void detach_CleaningRoomItems(CleaningRoomItem entity)
		{
			this.SendPropertyChanging();
			entity.CleaningRoomDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CleaningRoomItem")]
	public partial class CleaningRoomItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CleaningRoomDetailID;
		
		private int _ItemID;
		
		private int _Qty;
		
		private string _Status;
		
		private EntityRef<CleaningRoomDetail> _CleaningRoomDetail;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCleaningRoomDetailIDChanging(int value);
    partial void OnCleaningRoomDetailIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(int value);
    partial void OnQtyChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public CleaningRoomItem()
		{
			this._CleaningRoomDetail = default(EntityRef<CleaningRoomDetail>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CleaningRoomDetailID", DbType="Int NOT NULL")]
		public int CleaningRoomDetailID
		{
			get
			{
				return this._CleaningRoomDetailID;
			}
			set
			{
				if ((this._CleaningRoomDetailID != value))
				{
					if (this._CleaningRoomDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCleaningRoomDetailIDChanging(value);
					this.SendPropertyChanging();
					this._CleaningRoomDetailID = value;
					this.SendPropertyChanged("CleaningRoomDetailID");
					this.OnCleaningRoomDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int NOT NULL")]
		public int Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CleaningRoomDetail_CleaningRoomItem", Storage="_CleaningRoomDetail", ThisKey="CleaningRoomDetailID", OtherKey="ID", IsForeignKey=true)]
		public CleaningRoomDetail CleaningRoomDetail
		{
			get
			{
				return this._CleaningRoomDetail.Entity;
			}
			set
			{
				CleaningRoomDetail previousValue = this._CleaningRoomDetail.Entity;
				if (((previousValue != value) 
							|| (this._CleaningRoomDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CleaningRoomDetail.Entity = null;
						previousValue.CleaningRoomItems.Remove(this);
					}
					this._CleaningRoomDetail.Entity = value;
					if ((value != null))
					{
						value.CleaningRoomItems.Add(this);
						this._CleaningRoomDetailID = value.ID;
					}
					else
					{
						this._CleaningRoomDetailID = default(int);
					}
					this.SendPropertyChanged("CleaningRoomDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CleaningRoomItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.CleaningRoomItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.CleaningRoomItems.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _NIK;
		
		private string _Email;
		
		private System.Nullable<char> _Gender;
		
		private string _PhoneNumber;
		
		private System.Nullable<int> _Age;
		
		private EntitySet<Reservation> _Reservations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNIKChanging(string value);
    partial void OnNIKChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    #endregion
		
		public Customer()
		{
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIK", DbType="VarChar(50)")]
		public string NIK
		{
			get
			{
				return this._NIK;
			}
			set
			{
				if ((this._NIK != value))
				{
					this.OnNIKChanging(value);
					this.SendPropertyChanging();
					this._NIK = value;
					this.SendPropertyChanged("NIK");
					this.OnNIKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1)")]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(13)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Reservation", Storage="_Reservations", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Name;
		
		private string _Email;
		
		private string _Address;
		
		private System.DateTime _DateOfBirth;
		
		private int _JobID;
		
		private EntitySet<CleaningRoom> _CleaningRooms;
		
		private EntitySet<Reservation> _Reservations;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    #endregion
		
		public Employee()
		{
			this._CleaningRooms = new EntitySet<CleaningRoom>(new Action<CleaningRoom>(this.attach_CleaningRooms), new Action<CleaningRoom>(this.detach_CleaningRooms));
			this._Reservations = new EntitySet<Reservation>(new Action<Reservation>(this.attach_Reservations), new Action<Reservation>(this.detach_Reservations));
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_CleaningRoom", Storage="_CleaningRooms", ThisKey="ID", OtherKey="EmployeeID")]
		public EntitySet<CleaningRoom> CleaningRooms
		{
			get
			{
				return this._CleaningRooms;
			}
			set
			{
				this._CleaningRooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Reservation", Storage="_Reservations", ThisKey="ID", OtherKey="EmployeeID")]
		public EntitySet<Reservation> Reservations
		{
			get
			{
				return this._Reservations;
			}
			set
			{
				this._Reservations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Employee", Storage="_Job", ThisKey="JobID", OtherKey="ID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CleaningRooms(CleaningRoom entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_CleaningRooms(CleaningRoom entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Reservations(Reservation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _RequestPrice;
		
		private System.Nullable<int> _CompensationFee;
		
		private EntitySet<CleaningRoomItem> _CleaningRoomItems;
		
		private EntitySet<ReseravationRequestItem> _ReseravationRequestItems;
		
		private EntitySet<ReservationCheckOut> _ReservationCheckOuts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRequestPriceChanging(int value);
    partial void OnRequestPriceChanged();
    partial void OnCompensationFeeChanging(System.Nullable<int> value);
    partial void OnCompensationFeeChanged();
    #endregion
		
		public Item()
		{
			this._CleaningRoomItems = new EntitySet<CleaningRoomItem>(new Action<CleaningRoomItem>(this.attach_CleaningRoomItems), new Action<CleaningRoomItem>(this.detach_CleaningRoomItems));
			this._ReseravationRequestItems = new EntitySet<ReseravationRequestItem>(new Action<ReseravationRequestItem>(this.attach_ReseravationRequestItems), new Action<ReseravationRequestItem>(this.detach_ReseravationRequestItems));
			this._ReservationCheckOuts = new EntitySet<ReservationCheckOut>(new Action<ReservationCheckOut>(this.attach_ReservationCheckOuts), new Action<ReservationCheckOut>(this.detach_ReservationCheckOuts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestPrice", DbType="Int NOT NULL")]
		public int RequestPrice
		{
			get
			{
				return this._RequestPrice;
			}
			set
			{
				if ((this._RequestPrice != value))
				{
					this.OnRequestPriceChanging(value);
					this.SendPropertyChanging();
					this._RequestPrice = value;
					this.SendPropertyChanged("RequestPrice");
					this.OnRequestPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompensationFee", DbType="Int")]
		public System.Nullable<int> CompensationFee
		{
			get
			{
				return this._CompensationFee;
			}
			set
			{
				if ((this._CompensationFee != value))
				{
					this.OnCompensationFeeChanging(value);
					this.SendPropertyChanging();
					this._CompensationFee = value;
					this.SendPropertyChanged("CompensationFee");
					this.OnCompensationFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_CleaningRoomItem", Storage="_CleaningRoomItems", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<CleaningRoomItem> CleaningRoomItems
		{
			get
			{
				return this._CleaningRoomItems;
			}
			set
			{
				this._CleaningRoomItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReseravationRequestItem", Storage="_ReseravationRequestItems", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ReseravationRequestItem> ReseravationRequestItems
		{
			get
			{
				return this._ReseravationRequestItems;
			}
			set
			{
				this._ReseravationRequestItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReservationCheckOut", Storage="_ReservationCheckOuts", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<ReservationCheckOut> ReservationCheckOuts
		{
			get
			{
				return this._ReservationCheckOuts;
			}
			set
			{
				this._ReservationCheckOuts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CleaningRoomItems(CleaningRoomItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_CleaningRoomItems(CleaningRoomItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ReseravationRequestItems(ReseravationRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ReseravationRequestItems(ReseravationRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_ReservationCheckOuts(ReservationCheckOut entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ReservationCheckOuts(ReservationCheckOut entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemStatus")]
	public partial class ItemStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ReservationCheckOut> _ReservationCheckOuts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ItemStatus()
		{
			this._ReservationCheckOuts = new EntitySet<ReservationCheckOut>(new Action<ReservationCheckOut>(this.attach_ReservationCheckOuts), new Action<ReservationCheckOut>(this.detach_ReservationCheckOuts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemStatus_ReservationCheckOut", Storage="_ReservationCheckOuts", ThisKey="ID", OtherKey="ItemStatusID")]
		public EntitySet<ReservationCheckOut> ReservationCheckOuts
		{
			get
			{
				return this._ReservationCheckOuts;
			}
			set
			{
				this._ReservationCheckOuts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationCheckOuts(ReservationCheckOut entity)
		{
			this.SendPropertyChanging();
			entity.ItemStatus = this;
		}
		
		private void detach_ReservationCheckOuts(ReservationCheckOut entity)
		{
			this.SendPropertyChanging();
			entity.ItemStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Job()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_Employee", Storage="_Employees", ThisKey="ID", OtherKey="JobID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReseravationRequestItem")]
	public partial class ReseravationRequestItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ReservationRoomID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<int> _TotalPrice;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<ReservationRoom> _ReservationRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReservationRoomIDChanging(System.Nullable<int> value);
    partial void OnReservationRoomIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnTotalPriceChanging(System.Nullable<int> value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public ReseravationRequestItem()
		{
			this._Item = default(EntityRef<Item>);
			this._ReservationRoom = default(EntityRef<ReservationRoom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationRoomID", DbType="Int")]
		public System.Nullable<int> ReservationRoomID
		{
			get
			{
				return this._ReservationRoomID;
			}
			set
			{
				if ((this._ReservationRoomID != value))
				{
					if (this._ReservationRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationRoomID = value;
					this.SendPropertyChanged("ReservationRoomID");
					this.OnReservationRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int")]
		public System.Nullable<int> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReseravationRequestItem", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ReseravationRequestItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ReseravationRequestItems.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationRoom_ReseravationRequestItem", Storage="_ReservationRoom", ThisKey="ReservationRoomID", OtherKey="ID", IsForeignKey=true)]
		public ReservationRoom ReservationRoom
		{
			get
			{
				return this._ReservationRoom.Entity;
			}
			set
			{
				ReservationRoom previousValue = this._ReservationRoom.Entity;
				if (((previousValue != value) 
							|| (this._ReservationRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationRoom.Entity = null;
						previousValue.ReseravationRequestItems.Remove(this);
					}
					this._ReservationRoom.Entity = value;
					if ((value != null))
					{
						value.ReseravationRequestItems.Add(this);
						this._ReservationRoomID = value.ID;
					}
					else
					{
						this._ReservationRoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReservationRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reservation")]
	public partial class Reservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateTime;
		
		private int _EmployeeID;
		
		private int _CustomerID;
		
		private string _Code;
		
		private EntitySet<ReservationRoom> _ReservationRooms;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Reservation()
		{
			this._ReservationRooms = new EntitySet<ReservationRoom>(new Action<ReservationRoom>(this.attach_ReservationRooms), new Action<ReservationRoom>(this.detach_ReservationRooms));
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationRoom", Storage="_ReservationRooms", ThisKey="ID", OtherKey="ReservationID")]
		public EntitySet<ReservationRoom> ReservationRooms
		{
			get
			{
				return this._ReservationRooms;
			}
			set
			{
				this._ReservationRooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Reservation", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Reservation", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Reservations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Reservations.Add(this);
						this._EmployeeID = value.ID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationRooms(ReservationRoom entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = this;
		}
		
		private void detach_ReservationRooms(ReservationRoom entity)
		{
			this.SendPropertyChanging();
			entity.Reservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationCheckOut")]
	public partial class ReservationCheckOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReservationRoomID;
		
		private int _ItemID;
		
		private int _ItemStatusID;
		
		private int _Qty;
		
		private int _TotalCharge;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<ItemStatus> _ItemStatus;
		
		private EntityRef<ReservationRoom> _ReservationRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReservationRoomIDChanging(int value);
    partial void OnReservationRoomIDChanged();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnItemStatusIDChanging(int value);
    partial void OnItemStatusIDChanged();
    partial void OnQtyChanging(int value);
    partial void OnQtyChanged();
    partial void OnTotalChargeChanging(int value);
    partial void OnTotalChargeChanged();
    #endregion
		
		public ReservationCheckOut()
		{
			this._Item = default(EntityRef<Item>);
			this._ItemStatus = default(EntityRef<ItemStatus>);
			this._ReservationRoom = default(EntityRef<ReservationRoom>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationRoomID", DbType="Int NOT NULL")]
		public int ReservationRoomID
		{
			get
			{
				return this._ReservationRoomID;
			}
			set
			{
				if ((this._ReservationRoomID != value))
				{
					if (this._ReservationRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationRoomIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationRoomID = value;
					this.SendPropertyChanged("ReservationRoomID");
					this.OnReservationRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int NOT NULL")]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemStatusID", DbType="Int NOT NULL")]
		public int ItemStatusID
		{
			get
			{
				return this._ItemStatusID;
			}
			set
			{
				if ((this._ItemStatusID != value))
				{
					if (this._ItemStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ItemStatusID = value;
					this.SendPropertyChanged("ItemStatusID");
					this.OnItemStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int NOT NULL")]
		public int Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCharge", DbType="Int NOT NULL")]
		public int TotalCharge
		{
			get
			{
				return this._TotalCharge;
			}
			set
			{
				if ((this._TotalCharge != value))
				{
					this.OnTotalChargeChanging(value);
					this.SendPropertyChanging();
					this._TotalCharge = value;
					this.SendPropertyChanged("TotalCharge");
					this.OnTotalChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ReservationCheckOut", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ReservationCheckOuts.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ReservationCheckOuts.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemStatus_ReservationCheckOut", Storage="_ItemStatus", ThisKey="ItemStatusID", OtherKey="ID", IsForeignKey=true)]
		public ItemStatus ItemStatus
		{
			get
			{
				return this._ItemStatus.Entity;
			}
			set
			{
				ItemStatus previousValue = this._ItemStatus.Entity;
				if (((previousValue != value) 
							|| (this._ItemStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemStatus.Entity = null;
						previousValue.ReservationCheckOuts.Remove(this);
					}
					this._ItemStatus.Entity = value;
					if ((value != null))
					{
						value.ReservationCheckOuts.Add(this);
						this._ItemStatusID = value.ID;
					}
					else
					{
						this._ItemStatusID = default(int);
					}
					this.SendPropertyChanged("ItemStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationRoom_ReservationCheckOut", Storage="_ReservationRoom", ThisKey="ReservationRoomID", OtherKey="ID", IsForeignKey=true)]
		public ReservationRoom ReservationRoom
		{
			get
			{
				return this._ReservationRoom.Entity;
			}
			set
			{
				ReservationRoom previousValue = this._ReservationRoom.Entity;
				if (((previousValue != value) 
							|| (this._ReservationRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationRoom.Entity = null;
						previousValue.ReservationCheckOuts.Remove(this);
					}
					this._ReservationRoom.Entity = value;
					if ((value != null))
					{
						value.ReservationCheckOuts.Add(this);
						this._ReservationRoomID = value.ID;
					}
					else
					{
						this._ReservationRoomID = default(int);
					}
					this.SendPropertyChanged("ReservationRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationRoom")]
	public partial class ReservationRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReservationID;
		
		private int _RoomID;
		
		private System.DateTime _StartDateTime;
		
		private System.Nullable<System.DateTime> _DurationNight;
		
		private int _RoomPrice;
		
		private System.DateTime _CheckInDateTime;
		
		private System.DateTime _CheckOutDateTime;
		
		private EntitySet<ReseravationRequestItem> _ReseravationRequestItems;
		
		private EntitySet<ReservationCheckOut> _ReservationCheckOuts;
		
		private EntityRef<Reservation> _Reservation;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReservationIDChanging(int value);
    partial void OnReservationIDChanged();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnStartDateTimeChanging(System.DateTime value);
    partial void OnStartDateTimeChanged();
    partial void OnDurationNightChanging(System.Nullable<System.DateTime> value);
    partial void OnDurationNightChanged();
    partial void OnRoomPriceChanging(int value);
    partial void OnRoomPriceChanged();
    partial void OnCheckInDateTimeChanging(System.DateTime value);
    partial void OnCheckInDateTimeChanged();
    partial void OnCheckOutDateTimeChanging(System.DateTime value);
    partial void OnCheckOutDateTimeChanged();
    #endregion
		
		public ReservationRoom()
		{
			this._ReseravationRequestItems = new EntitySet<ReseravationRequestItem>(new Action<ReseravationRequestItem>(this.attach_ReseravationRequestItems), new Action<ReseravationRequestItem>(this.detach_ReseravationRequestItems));
			this._ReservationCheckOuts = new EntitySet<ReservationCheckOut>(new Action<ReservationCheckOut>(this.attach_ReservationCheckOuts), new Action<ReservationCheckOut>(this.detach_ReservationCheckOuts));
			this._Reservation = default(EntityRef<Reservation>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationID", DbType="Int NOT NULL")]
		public int ReservationID
		{
			get
			{
				return this._ReservationID;
			}
			set
			{
				if ((this._ReservationID != value))
				{
					if (this._Reservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationID = value;
					this.SendPropertyChanged("ReservationID");
					this.OnReservationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int NOT NULL")]
		public int RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="Date NOT NULL")]
		public System.DateTime StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationNight", DbType="Date")]
		public System.Nullable<System.DateTime> DurationNight
		{
			get
			{
				return this._DurationNight;
			}
			set
			{
				if ((this._DurationNight != value))
				{
					this.OnDurationNightChanging(value);
					this.SendPropertyChanging();
					this._DurationNight = value;
					this.SendPropertyChanged("DurationNight");
					this.OnDurationNightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomPrice", DbType="Int NOT NULL")]
		public int RoomPrice
		{
			get
			{
				return this._RoomPrice;
			}
			set
			{
				if ((this._RoomPrice != value))
				{
					this.OnRoomPriceChanging(value);
					this.SendPropertyChanging();
					this._RoomPrice = value;
					this.SendPropertyChanged("RoomPrice");
					this.OnRoomPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CheckInDateTime
		{
			get
			{
				return this._CheckInDateTime;
			}
			set
			{
				if ((this._CheckInDateTime != value))
				{
					this.OnCheckInDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckInDateTime = value;
					this.SendPropertyChanged("CheckInDateTime");
					this.OnCheckInDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckOutDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CheckOutDateTime
		{
			get
			{
				return this._CheckOutDateTime;
			}
			set
			{
				if ((this._CheckOutDateTime != value))
				{
					this.OnCheckOutDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckOutDateTime = value;
					this.SendPropertyChanged("CheckOutDateTime");
					this.OnCheckOutDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationRoom_ReseravationRequestItem", Storage="_ReseravationRequestItems", ThisKey="ID", OtherKey="ReservationRoomID")]
		public EntitySet<ReseravationRequestItem> ReseravationRequestItems
		{
			get
			{
				return this._ReseravationRequestItems;
			}
			set
			{
				this._ReseravationRequestItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationRoom_ReservationCheckOut", Storage="_ReservationCheckOuts", ThisKey="ID", OtherKey="ReservationRoomID")]
		public EntitySet<ReservationCheckOut> ReservationCheckOuts
		{
			get
			{
				return this._ReservationCheckOuts;
			}
			set
			{
				this._ReservationCheckOuts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reservation_ReservationRoom", Storage="_Reservation", ThisKey="ReservationID", OtherKey="ID", IsForeignKey=true)]
		public Reservation Reservation
		{
			get
			{
				return this._Reservation.Entity;
			}
			set
			{
				Reservation previousValue = this._Reservation.Entity;
				if (((previousValue != value) 
							|| (this._Reservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reservation.Entity = null;
						previousValue.ReservationRooms.Remove(this);
					}
					this._Reservation.Entity = value;
					if ((value != null))
					{
						value.ReservationRooms.Add(this);
						this._ReservationID = value.ID;
					}
					else
					{
						this._ReservationID = default(int);
					}
					this.SendPropertyChanged("Reservation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationRoom", Storage="_Room", ThisKey="RoomID", OtherKey="ID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.ReservationRooms.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.ReservationRooms.Add(this);
						this._RoomID = value.ID;
					}
					else
					{
						this._RoomID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReseravationRequestItems(ReseravationRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.ReservationRoom = this;
		}
		
		private void detach_ReseravationRequestItems(ReseravationRequestItem entity)
		{
			this.SendPropertyChanging();
			entity.ReservationRoom = null;
		}
		
		private void attach_ReservationCheckOuts(ReservationCheckOut entity)
		{
			this.SendPropertyChanging();
			entity.ReservationRoom = this;
		}
		
		private void detach_ReservationCheckOuts(ReservationCheckOut entity)
		{
			this.SendPropertyChanging();
			entity.ReservationRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoomTypeID;
		
		private int _RoomNumber;
		
		private int _RoomFloor;
		
		private string _Description;
		
		private EntitySet<CleaningRoomDetail> _CleaningRoomDetails;
		
		private EntitySet<ReservationRoom> _ReservationRooms;
		
		private EntityRef<RoomType> _RoomType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnRoomNumberChanging(int value);
    partial void OnRoomNumberChanged();
    partial void OnRoomFloorChanging(int value);
    partial void OnRoomFloorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Room()
		{
			this._CleaningRoomDetails = new EntitySet<CleaningRoomDetail>(new Action<CleaningRoomDetail>(this.attach_CleaningRoomDetails), new Action<CleaningRoomDetail>(this.detach_CleaningRoomDetails));
			this._ReservationRooms = new EntitySet<ReservationRoom>(new Action<ReservationRoom>(this.attach_ReservationRooms), new Action<ReservationRoom>(this.detach_ReservationRooms));
			this._RoomType = default(EntityRef<RoomType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="Int NOT NULL")]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._RoomType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumber", DbType="Int NOT NULL")]
		public int RoomNumber
		{
			get
			{
				return this._RoomNumber;
			}
			set
			{
				if ((this._RoomNumber != value))
				{
					this.OnRoomNumberChanging(value);
					this.SendPropertyChanging();
					this._RoomNumber = value;
					this.SendPropertyChanged("RoomNumber");
					this.OnRoomNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomFloor", DbType="Int NOT NULL")]
		public int RoomFloor
		{
			get
			{
				return this._RoomFloor;
			}
			set
			{
				if ((this._RoomFloor != value))
				{
					this.OnRoomFloorChanging(value);
					this.SendPropertyChanging();
					this._RoomFloor = value;
					this.SendPropertyChanged("RoomFloor");
					this.OnRoomFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_CleaningRoomDetail", Storage="_CleaningRoomDetails", ThisKey="ID", OtherKey="RoomID")]
		public EntitySet<CleaningRoomDetail> CleaningRoomDetails
		{
			get
			{
				return this._CleaningRoomDetails;
			}
			set
			{
				this._CleaningRoomDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationRoom", Storage="_ReservationRooms", ThisKey="ID", OtherKey="RoomID")]
		public EntitySet<ReservationRoom> ReservationRooms
		{
			get
			{
				return this._ReservationRooms;
			}
			set
			{
				this._ReservationRooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomType_Room", Storage="_RoomType", ThisKey="RoomTypeID", OtherKey="ID", IsForeignKey=true)]
		public RoomType RoomType
		{
			get
			{
				return this._RoomType.Entity;
			}
			set
			{
				RoomType previousValue = this._RoomType.Entity;
				if (((previousValue != value) 
							|| (this._RoomType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomType.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._RoomType.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._RoomTypeID = value.ID;
					}
					else
					{
						this._RoomTypeID = default(int);
					}
					this.SendPropertyChanged("RoomType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CleaningRoomDetails(CleaningRoomDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_CleaningRoomDetails(CleaningRoomDetail entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_ReservationRooms(ReservationRoom entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_ReservationRooms(ReservationRoom entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
}
#pragma warning restore 1591
